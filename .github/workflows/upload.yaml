name: Upload

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Create package
        run: sudo apt update && sudo apt install zip -y && sudo apt install curl -y  && sudo apt install jq -y && cd src && unzip *.zip && rm *.zip && zip -r ../Archive.zip . && cd ..

      # Runs a set of commands using the runner's shell
      - name: Upload package
        env:
          PROJECTID: ${{ secrets.PROJECTID }}
          AUTH: ${{ secrets.AUTH }}
          URL: "https://ia.es.deloitte.com/Monolith/"
          COOKIE: ${{ secrets.COOKIE }}
        run: |
          INSIGHTID=$(curl -s -k -X POST -b "$COOKIE" "$URL/api/engine/runPixel" \
            -d 'expression=GetUserInfo();&insightId=new' | jq -r '.insightID') 
          
          echo -e "\n\n\n$INSIGHTID\n\n" 

          curl -i -k -X POST -b "$COOKIE" "$URL/api/uploadFile/baseUpload?insightId=$INSIGHTID" \
            -H "Content-Type: application/x-zip-compressed" -F "file=@Archive.zip"

          curl -i -k -X POST -b "$COOKIE" "$URL/api/engine/runPixel" \
            -d 'expression=UploadEngine(filePath=["@Archive.zip"], engineTypes=["MODEL"]);&insightId='"$INSIGHTID"

          curl -i -k -X POST -b "$COOKIE" "$URL/api/engine/runPixel" \
            -d 'expression=GetEngineMetaValues(engineTypes=["MODEL"], metaKeys=["tag","domain"]);&insightId='"$INSIGHTID"

          curl -i -k -X POST -b "$COOKIE" "$URL/api/auth/project/setProjectPortal" \
            -d 'expression=MyEngines(metaKeys=["tag","domain","data classification","data restrictions","description"], metaFilters=[{}], filterWord=[""], onlyFavorites=[true], engineTypes=["MODEL"]);&insightId='"$INSIGHTID"

          curl -i -k -X POST -b "$COOKIE" "$URL/api/engine/runPixel" \
            -d 'expression=MyEngines(metaKeys=["tag","domain","data classification","data restrictions","description"], metaFilters=[{}], filterWord=[""], userT=[true], engineTypes=["MODEL"], offset=[0], limit=[15]);&insightId='"$INSIGHTID"

          curl -i -k -X POST -b "$COOKIE" "$URL/api/engine/runPixel" \
            -d 'expression=GetEngineMetaValues(engineTypes=["MODEL"], metaKeys=["tag","domain","data classification","data restrictions"]);&insightId='"$INSIGHTID"
